local toBuy = {
["Santa TV Man"] = { 500, 55 }, -- max price to buy for, max amt of troop in inventory
['Green Laser Cameraman'] = { 1200, 55 },
['Announcer Cameraman'] = { 60, 55 },
['DJ Speakerman'] = { 60, 55 },
['Leprechaun Cameraman'] = { 800, 55 },
['Lucky Speakerman'] = { 50, 55 },
}
local items = 0
local e
repeat
    task.wait(1)
    pcall(function() e = require(game:GetService("ReplicatedStorage").MultiboxFramework) end)
until game:IsLoaded() and #game:GetService("ReplicatedStorage"):GetDescendants() >= 26500 and e ~= nil and e.Network and e.Replicate
game:GetService("ReplicatedStorage"):WaitForChild("MultiboxFramework")
local TTD = require(game:GetService("ReplicatedStorage").MultiboxFramework)
local save = TTD.Replicate:WaitForReplica("PlayerData-" .. game:GetService("Players").LocalPlayer.UserId)
local handler
local Network = TTD.Network
local Invoke = Network.Invoke; local GetFunc = getupvalue(Invoke, 1)
local Fire = Network.Fire; local GetEvent = getupvalue(Fire, 1)
if TTD.debug then print('Found Invoke/Fire') end
-- $ -- Bypass
coroutine.wrap(function()
    setidentity(2)
    hookfunc(getupvalue(GetFunc, 1), function()
        return true
    end)
    setidentity(8)
end)()
coroutine.wrap(function()
    setidentity(2)
    hookfunc(getupvalue(GetEvent, 1), function()
        return true
    end)
    setidentity(8)
end)()

function convertStringToNumber(str)
    local suffixes = {["k"] = 10^3, ["m"] = 10^6}
    local num, suffix = str:match("(%d+)([km]?)")
    num = tonumber(num)
    if suffixes[suffix] then
        num = num * suffixes[suffix]
    end
    return num
end

local invTroops = {}
function getInventoryTroops()
    invTroops = {}
    local save = TTD.Replicate:WaitForReplica("PlayerData-" .. game:GetService("Players").LocalPlayer.UserId)
    for name, v in pairs(save._data.Inventory.Troops) do
        for i, v in pairs(v) do
            invTroops[i] = name
        end
    end
    return invTroops
end
function getAmtOfTroop(name)
    amt = 0
    troops = getInventoryTroops()
    for i, v in troops do
        if v == name then
            amt = amt + 1
        end
    end
    return amt
end
@@ -86,26 +96,33 @@
function convertDisplayToId(display)
    for i, v in datas do
        if v == display then
            return i
        end
    end
end
for i, v in toBuy do
    local name = convertDisplayToId(i)
    print(name, getAmtOfTroop(name))
    if getAmtOfTroop(name) >= v[2] then
        print(name, getAmtOfTroop(name), "more than", v[2])
        toBuy[i] = nil
    end
end
local tobuyN = 0
for i, v in toBuy do
    tobuyN = tobuyN + 1
end

if tobuyN == 0 then
    writefile(game.Players.LocalPlayer.Name..".txt","Yummytool")
    task.wait(1)
    game:Shutdown()
    coroutine.yield()
end

if game.PlaceId ~= 14682939953 then
    if tobuyN > 0 then
        game:GetService("TeleportService"):Teleport(14682939953, game:GetService("Players").LocalPlayer)
@@ -275,7 +292,7 @@ if game.PlaceId ~= 13775256536 then

            local huh = false
            local suc, f = pcall(function()
                if toBuy[name] and convertStringToNumber(price) > toBuy[name][1] then
                    toBuy[name] = nil
                end
            end)
            if not suc or huh then continue end
            local buyButton = v.MainFrame.UnitInfo.Buttons.BuyUnit.BuyButton
            clickGui(buyButton)
            print "buying"
            local confirmBtn
            repeat
                pcall(function()
                    confirmBtn = game:GetService("Players").LocalPlayer.PlayerGui.Lobby.MarketplaceFrame.MarketplaceMain
                        .MainFrame.ConfirmPopup.Options.Confirm.ConfirmButton
                end)
                wait()
            until confirmBtn ~= nil
            print("buying pt2")
            clickGui(confirmBtn)
            for i, v in toBuy do
                if getAmtOfTroop(i) >= v[2] then
                    toBuy[i] = nil
                end
            end
            print "bought"
        end
        task.wait(1)
        items = 0
        for i, v in toBuy do
            items = items + 1
        end
        print(items)
    end
    print "hop"
    RealHop()
end
